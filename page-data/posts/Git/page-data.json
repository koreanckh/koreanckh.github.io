{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Git",
    "result": {"pageContext":{"currentCategory":"Git","categories":["All","블로그","AWS","Git","잡담","featured"],"edges":[{"node":{"id":"108f652a-6d7a-5490-8228-d31e23426eac","excerpt":"4. IAM 권한 설정 (1) EC2 적용     AWSCodeDeployFullAccess AmazonS3FullAccess 두 가지 권한을 체크하여 역할을 만든다. 역할 이름은 EC2에 권한 설정을 해줘야 하기 때문에 기억해두어야 한다. 위에서 만든 IAM 역할을 EC2 서버에 적용해주자.   (2) CodeDeploy 적용 \n이번에는 CodeDeploy에 적용할 IAM을 만들어야 하는데, AWS에서 서비스하는 CodeDeploy를 이용할 것이기 때문에 검색하여 선택해주고, 다음화면에서는 권한을 따로 체크해주지 않아도 된다. 5. CodeDeploy 생성.   EC2 서버에 배포해줄 CodeDeploy를 만들어주자.","fields":{"slug":"/aws-003-github-action-with-codedeploy-2/"},"frontmatter":{"categories":"블로그 AWS Git","title":"Github Action + AWS EC2 CodeDeploy + S3를 이용하여 자동 배포 하기 (2/2)","date":"August 30, 2022"}},"next":{"fields":{"slug":"/aws-002-github-action-with-codedeploy/"}},"previous":null},{"node":{"id":"6a799182-8fb3-59b4-97e1-d6b5b65d82a5","excerpt":"0. 전체적인 흐름 Github Action 설정을 통해 빌드 파일을 S3에 업로드 하고, CodeDeploy 를 실행함. CodeDeploy 에서 EC2에 배포 실행하도록 명령. 1단계에서 S3에 올려둔 필드 파일을 EC2에서 가져와 예약된 스크립트 실행. 1. S3 만들기 Github Action으로 만들어진 빌드 압축파일을 업로드 할 S3파일을 만들어주자. \n다른 설정들은 기본 옵션으로 두고 만 확인해두자. Github Action 설정 yml파일에 업로드할 S3 버킷 이름을 세팅해줘야 한다. 2. AWS EC2 서버에 CodeDeploy 설치 CodeDeploy 설치시 필요한 패키지 설치 이전 에이전트 캐싱 정보의 AMI를 정리 임시 shell 파일을 만들어서 실행해주자. 파일 다운로드 다운로드 파일 설치 설치 확인 및 실행 라는 메시지가 나오면 성공! CodeDeploy 설치 : https://docs.aws.amazon.com/ko_kr/codedeploy/latest/…","fields":{"slug":"/aws-002-github-action-with-codedeploy/"},"frontmatter":{"categories":"블로그 AWS Git","title":"Github Action + AWS EC2 CodeDeploy + S3를 이용하여 자동 배포 하기 (1/2)","date":"August 29, 2022"}},"next":{"fields":{"slug":"/aws-001/"}},"previous":{"fields":{"slug":"/aws-003-github-action-with-codedeploy-2/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}